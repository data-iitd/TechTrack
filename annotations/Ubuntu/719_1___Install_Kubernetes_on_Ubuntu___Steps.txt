Install Kubernetes on Ubuntu
https://www.wikihow.com/Install-Kubernetes-on-Ubuntu

0 - Steps

1 -  Install the dependencies.
Install the dependencies. Install all the necessary dependencies on your machine. This needs to be done across machines that you plan to join to the Kubernetes cluster.
-  Install apt-transport-https. It’s a package that lets you use both http and https in apt packages. This can be done via the following command
- sudo apt-get update && 
- apt-get install -y apt-transport-https
- 
-  Install Docker. Docker is a popular container service that lets you create containers and deploy them into anywhere in the cloud. Install Docker using the following prompt 
- sudo apt install docker.io
- 
- 
- ;

2 -  Start the Docker services.
Start the Docker services. Once you’ve installed Docker, you will need to start the docker services and enable it. We’ll be using systemctl to start the docker. 
- 
-  sudo systemctl start docker <br/> sudo systemctl enable docker
- 
- Your system should now be ready to install Kubernetes.

3 -  Install Kubernetes.
Install Kubernetes. The actual installation of the required Kubernetes components is relatively easy. You need to import the GPG key first. Using the terminal, you can use the following command to add the keys:
- 
-  sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add
- 
- Create a repository. Now you can add a repository by creating the file  /etc/apt/sources.list.d/kubernetes.list. Add the following lines:
- 
-  deb http://apt.kubernetes.io/ kubernetes-xenial main 
- 
-  After you save and close the file, you can install Kubernetes using the commands below:
- 
-  apt-get update <br/> apt-get install -y kubelet kubeadm kubectl kubernetes-cni

4 -  Initialize the master.
Initialize the master. To successfully set up Kubernetes across a cluster, you need to initialize one machine as the master/admin.
- 
- sudo kubeadm init
- 
- Once this is completed, you’ll be given the specific command needed in order to join nodes to the master.

5 -  Set the right permission.
Set the right permission. However, before you join a node, you would need to run the following commands as a regular user. This is to avoid permission issues later on. 
-  mkdir -p $HOME/.kube <br /> sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config <br/>	sudo chown $(id -u):$(id -g) $HOME/.kube/config

6 - Deploy a Pod network.
Deploy a Pod network. Now that you’ve initialized the master, you would need to deploy a pod network to enable proper functioning. To achieve this, you would need to run two commands, this time using the Kubernetes machine.
- 
-  sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml <br/>
- sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/k8s-manifests/kube-flannel-rbac.yml
- 
- Verify that the Pod network has been successfully deployed.  
-  sudo kubectl get pods —all-namespaces

7 -  Join a node.
Join a node. Once everything is in place and functioning as expected, you can join a node to the master. To accomplish this, run the following command: 
-  sudo kubeadm join --token TOKEN MASTER_IP:6443

8 -  Create a new service and deploy.
Create a new service and deploy. Once all aspects are installed and ready, the next step is to deploy it. Practically, there are many ways that you can get started with deploying kubernetes. For instance, you can deploy a NGINX service onto your Kubernetes cluster, and export the service on port 80. 
-  sudo kubectl run <br/> sudo kubectl expose deployment nginx-app
- 
- You should be able to see the service listed if you go to your node and run the command 
- 
-  sudo docker ps –a
- 
- Your Kubernetes cluster is now ready. You have a working basic Kubernetes cluster which consists of a master and a single node. The cluster can be scaled at any time by installing and adding additional nodes.

